import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";

const url = "https://course-api.com/react-useReducer-cart-project";

const initialState = {
  cartItems: [],
  amount: 4,
  total: 0,
  isLoading: true,
};

export const getCartItems = createAsyncThunk(
  "cart/getCartItems",
  async (payload, thunkAPI) => {
    try {
      // payload is the value you dispatch the thunk with, It could be any data you want to pass to the thunk to use during its execution
      const response = await fetch(url);
      if (!response.ok) {
        throw new Error("Network response was not ok");
      }

      const data = await response.json();
      console.log(data);
      return data;
    } catch (error) {
      // In Redux Toolkit's createAsyncThunk, the rejectWithValue function is a utility provided to handle the rejection of a promise in the asynchronous thunk.
      return thunkAPI.rejectWithValue("something went wrong");
    }
  }
);

const cartSlice = createSlice({
  name: "cart",
  initialState,
  reducers: {
    clearCart: (state) => {
      state.cartItems = [];
    },
    removeItem: (state, action) => {
      const itemId = action.payload;
      // Purpose: Removes a specific item from the shopping cart based on its id.
      state.cartItems = state.cartItems.filter((item) => item.id !== itemId);
    },
    // Object destructuring is a useful JavaScript feature to extract properties from objects and bind them to variables.
    increase: (state, { payload }) => {
      // Finds the item in state.cartItems with the matching id from the payload and increments its amount property by 1
      const cartItem = state.cartItems.find((item) => item.id === payload.id);
      cartItem.amount = cartItem.amount + 1;
    },
    decrease: (state, { payload }) => {
      // Finds the item in state.cartItems with the matching id from the payload and decrements its amount property by 1
      const cartItem = state.cartItems.find((item) => item.id === payload.id);
      cartItem.amount = cartItem.amount - 1;
    },
    calculateTotals: (state) => {
      /* 
      Iterates over state.cartItems, updating amount by adding the quantity of each item, 
      and updating total by adding the product of the quantity and price of each item. 
      Finally, updates state.amount and state.total with the calculated values.
      */
      let amount = 0;
      let total = 0;
      state.cartItems.forEach((item) => {
        // amount = amount + item.amount
        // incrementing the value of the variable amount
        amount += item.amount;
        total += item.amount * item.price;
      });
      state.amount = amount;
      state.total = total;
    },
  },
  // The extraReducers allows you to respond to an action in your slice reducer
  // The function form has an input argument named builder.
  // In Redux Toolkit, extraReducers is an optional configuration object that allows you to define additional
  // reducers that respond to actions generated by other parts of your application, such as thunks or other slices.
  extraReducers: (builder) => {
    builder
      // When the getCartItems thunk is in a pending state (meaning the asynchronous operation is ongoing), this case sets the isLoading state to true to indicate that the data is currently being fetched.
      .addCase(getCartItems.pending, (state) => {
        state.isLoading = true;
      })
      .addCase(getCartItems.fulfilled, (state, action) => {
        /* When the asynchronous operation successfully completes (fulfilled), this case sets isLoading to false 
        to indicate that the data fetching is complete. 
        It also updates the cartItems state with the data received from the API, which is available in 
        the action.payload.
        */
        // console.log(action);
        state.isLoading = false;
        state.cartItems = action.payload;
      })
      .addCase(getCartItems.rejected, (state, action) => {
        // If an error occurs during the asynchronous operation (rejected state), this case logs information about the action (which may include an error message) to the console. It then sets isLoading to false
        console.log(action);
        state.isLoading = false;
      });
  },
});

// console.log(cartSlice);
export const { clearCart, removeItem, increase, decrease, calculateTotals } =
  cartSlice.actions;

export default cartSlice.reducer;
